// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: linuxserver.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	JobManager_Start_FullMethodName  = "/JobManager/Start"
	JobManager_Stop_FullMethodName   = "/JobManager/Stop"
	JobManager_Query_FullMethodName  = "/JobManager/Query"
	JobManager_List_FullMethodName   = "/JobManager/List"
	JobManager_Output_FullMethodName = "/JobManager/Output"
)

// JobManagerClient is the client API for JobManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobManagerClient interface {
	Start(ctx context.Context, in *Job, opts ...grpc.CallOption) (*Job, error)
	Stop(ctx context.Context, in *JobID, opts ...grpc.CallOption) (*NilMessage, error)
	Query(ctx context.Context, in *JobID, opts ...grpc.CallOption) (*JobStatus, error)
	List(ctx context.Context, in *NilMessage, opts ...grpc.CallOption) (*JobStatusList, error)
	Output(ctx context.Context, in *JobID, opts ...grpc.CallOption) (*JobOutput, error)
}

type jobManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewJobManagerClient(cc grpc.ClientConnInterface) JobManagerClient {
	return &jobManagerClient{cc}
}

func (c *jobManagerClient) Start(ctx context.Context, in *Job, opts ...grpc.CallOption) (*Job, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Job)
	err := c.cc.Invoke(ctx, JobManager_Start_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagerClient) Stop(ctx context.Context, in *JobID, opts ...grpc.CallOption) (*NilMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NilMessage)
	err := c.cc.Invoke(ctx, JobManager_Stop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagerClient) Query(ctx context.Context, in *JobID, opts ...grpc.CallOption) (*JobStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JobStatus)
	err := c.cc.Invoke(ctx, JobManager_Query_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagerClient) List(ctx context.Context, in *NilMessage, opts ...grpc.CallOption) (*JobStatusList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JobStatusList)
	err := c.cc.Invoke(ctx, JobManager_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagerClient) Output(ctx context.Context, in *JobID, opts ...grpc.CallOption) (*JobOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JobOutput)
	err := c.cc.Invoke(ctx, JobManager_Output_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobManagerServer is the server API for JobManager service.
// All implementations must embed UnimplementedJobManagerServer
// for forward compatibility.
type JobManagerServer interface {
	Start(context.Context, *Job) (*Job, error)
	Stop(context.Context, *JobID) (*NilMessage, error)
	Query(context.Context, *JobID) (*JobStatus, error)
	List(context.Context, *NilMessage) (*JobStatusList, error)
	Output(context.Context, *JobID) (*JobOutput, error)
	mustEmbedUnimplementedJobManagerServer()
}

// UnimplementedJobManagerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedJobManagerServer struct{}

func (UnimplementedJobManagerServer) Start(context.Context, *Job) (*Job, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedJobManagerServer) Stop(context.Context, *JobID) (*NilMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedJobManagerServer) Query(context.Context, *JobID) (*JobStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedJobManagerServer) List(context.Context, *NilMessage) (*JobStatusList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedJobManagerServer) Output(context.Context, *JobID) (*JobOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Output not implemented")
}
func (UnimplementedJobManagerServer) mustEmbedUnimplementedJobManagerServer() {}
func (UnimplementedJobManagerServer) testEmbeddedByValue()                    {}

// UnsafeJobManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobManagerServer will
// result in compilation errors.
type UnsafeJobManagerServer interface {
	mustEmbedUnimplementedJobManagerServer()
}

func RegisterJobManagerServer(s grpc.ServiceRegistrar, srv JobManagerServer) {
	// If the following call pancis, it indicates UnimplementedJobManagerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&JobManager_ServiceDesc, srv)
}

func _JobManager_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Job)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagerServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobManager_Start_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagerServer).Start(ctx, req.(*Job))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManager_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagerServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobManager_Stop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagerServer).Stop(ctx, req.(*JobID))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManager_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagerServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobManager_Query_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagerServer).Query(ctx, req.(*JobID))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManager_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NilMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobManager_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagerServer).List(ctx, req.(*NilMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManager_Output_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagerServer).Output(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobManager_Output_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagerServer).Output(ctx, req.(*JobID))
	}
	return interceptor(ctx, in, info, handler)
}

// JobManager_ServiceDesc is the grpc.ServiceDesc for JobManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "JobManager",
	HandlerType: (*JobManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _JobManager_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _JobManager_Stop_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _JobManager_Query_Handler,
		},
		{
			MethodName: "List",
			Handler:    _JobManager_List_Handler,
		},
		{
			MethodName: "Output",
			Handler:    _JobManager_Output_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "linuxserver.proto",
}
